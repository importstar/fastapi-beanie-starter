"""
{{ pascal_case }} use case containing business logic
"""
from fastapi import Depends
from typing import List, Optional

from .model import {{ pascal_case }}
from .repository import {{ pascal_case }}Repository, get_{{ feature_name }}_repository
from .schemas import {{ pascal_case }}Request, {{ pascal_case }}Response
from ...core.base_use_case import BaseUseCase


class {{ pascal_case }}UseCase(BaseUseCase[{{ pascal_case }}, {{ pascal_case }}Repository, {{ pascal_case }}Response]):
    """Use case for {{ pascal_case }} business operations"""
    
    def __init__(self, repository: {{ pascal_case }}Repository):
        super().__init__(repository, {{ pascal_case }}Response)

    # TODO: Add your business logic methods here
    # Example:
    # async def process_{{ feature_name }}(self, data: {{ pascal_case }}Request) -> {{ pascal_case }}Response:
    #     """Process {{ feature_name }} business logic"""
    #     # 1. Validate business rules
    #     # 2. Process data
    #     # 3. Call repository
    #     # 4. Return result
    #     pass


# Dependency providers
async def get_{{ feature_name }}_use_case(
    repository: {{ pascal_case }}Repository = Depends(get_{{ feature_name }}_repository),
) -> {{ pascal_case }}UseCase:
    """Get {{ feature_name }} use case with injected dependencies"""
    return {{ pascal_case }}UseCase(repository)
